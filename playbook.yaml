---
# List of plays
-
  # Hosts: where our play will run and options it will run with
  hosts: localhost
  connection: local
  gather_facts: yes
  tags: always

  # Vars: variables that will apply to the play, on all targets 

  # Tasks: the list of tasks that will be executed within 
  #        the play, this section can also be used for 
  #        pre and post tasks
  tasks:
    # from https://superuser.com/questions/1395954/ansible-playbook-to-determine-os-release
  - name: System details
    debug: msg="{{ item }}"
    with_items: 
    - "{{ ansible_distribution }}"
    - "{{ ansible_distribution_version }}"
    - "{{ ansible_distribution_major_version }}"
    # Detect if we are running on a WSL2 environment
  - name: Set wsl2_environment fact default to false
    set_fact:
      wsl2_environment: false
  - name: Set wsl2_environment fact True
    set_fact:
      wsl2_environment: true
    when: ansible_kernel is search("microsoft-standard-WSL2")  
  # fix for .gnupg/ permissions when building custom images
  - name: Add fix for .gnupg/ permissions
    lineinfile:
      path: "/etc/bash.bashrc"
      line: "chmod 700 ~/.gnupg/"    
  - name: Add custom prompt to /etc/skel/.profile
    lineinfile:
      path: "/etc/skel/.profile"
      line: 'export PS1="\e[0;32m[\w]\$ \e[0m"'

  # Handlers: the list of handlers that are executed as a notify 
  #           key from a task

  # Roles: list of roles to be imported into the play
  roles:
  - role: irixjp.role_example_hello

# Add additional plays here (remember the list entry -)
# Be sure to use the same hosts and connection entries above
# addtional plays

- 
  # Install NodeJS Tools
  hosts: localhost
  connection: local
  gather_facts: yes
  tags: install_node

  vars:
    node_version: "16.14.0"
    v_node_version: "v{{ node_version }}"
    npm_version: "8.3.1"
    npx_version: "8.3.1"
    yarn_version: "1.22.11"
    yo_version: "4.3.0"
    generator_code_version: "1.6.7"


  tasks:   # Test Node JS Tools versions
  - name: Get node version
    shell: node --version
    register: installed_node_version
  - name: Get npm version
    shell: npm --version
    register: installed_npm_version
  - name: Get npx installed version
    shell: npx --version
    register: installed_npx_version
  - name: Get yarn version
    shell: yarn --version
    register: installed_yarn_version    
  - name: Display node tool versions
    debug:
      msg: "Node = {{ installed_node_version.stdout }} | npm = {{ installed_npm_version.stdout }} | npx = {{ installed_npx_version.stdout }} | yarn = {{ installed_yarn_version.stdout }}"
  - name: Test node version
    fail:
      msg: "NodeJS Version Error: Expected {{ v_node_version }} | Found {{ installed_node_version.stdout }}"
    when: installed_node_version.stdout != v_node_version      
  - name: Test npm version
    fail:
      msg: "NPM Version Error: Expected {{ npm_version }} | Found {{ installed_npm_version.stdout }}"
    when: installed_npm_version.stdout != npm_version
  - name: Test npx version
    fail:
      msg: "NPX Version Error: Expected {{ npx_version }} | Found {{ installed_npx_version.stdout }}"
    when: installed_npx_version.stdout != npx_version
  - name: Test yarn version
    fail:
      msg: "Yarn Version Error: Expected {{ yarn_version }} | Found {{ installed_yarn_version.stdout }}"
    when: installed_yarn_version.stdout != yarn_version        

  roles:
  - role: grzegorznowak.nvm_node
    nvm_install_script_version: "0.39.1"  
    nvm_node_version: "{{ node_version }}"  
    nvm_install_globally:
    - name: yarn
      version: "{{ yarn_version }}"
    - name: yo
      version: "{{ yo_version }}"
    - name: generator-code
      version: "{{ generator_code_version }}"    

-
  # install keychain, git, and @capsulecorplab .vimrc and .gitconfig
  hosts: localhost
  connection: local
  gather_facts: yes
  tags: install_utilities

  vars:
    git_version: "2.35.1"
    git_version_to_install: "1:{{ git_version }}-0ppa1~ubuntu20.04.1"
    keychain_version: "2.8.5"
    keychain_version_to_install: "{{ keychain_version }}-1"
    keychain_version_expected: "{{ keychain_version }}.."

  tasks:
  - name: Add git PPA
    shell: add-apt-repository ppa:git-core/ppa
  - name: Install git
    apt:
      name: "git={{ git_version_to_install }}"  
  - name: Install Keychain
    apt:
      name: "keychain={{ keychain_version_to_install }}"
      update_cache: yes
  - name: Get git version
    shell: git version | sed 's/[[:alpha:]|(|[:space:]]//g'
    register: installed_git_version
  - name: Get keychain version
    shell: 
      cmd: keychain -V 2> >(grep -i keychain) 2> >(sed 's/[[:alpha:]|(|[:space:]]//g') | fgrep '*' | sed 's/[*~://]//g'
      executable: /bin/bash
    register: installed_keychain_version
  - name: Display git and keychain versions
    debug:
      msg: "git = {{ installed_git_version.stdout }} | keychain = {{ installed_keychain_version.stdout }}"
  - name: Test git version
    fail:
      msg: "Git Version Error: Expected {{ git_version }} | Found {{ installed_git_version.stdout }}"
    when: installed_git_version.stdout != git_version  
  - name: Test keychain version
    fail:
      msg: "Keychain Version Error: Expected {{ keychain_version_expected }} | Found {{ installed_keychain_version.stdout }}"
    when: installed_keychain_version.stdout != keychain_version_expected   
  - name: Install @capsulecorplab .vimrc
    get_url:
      url: https://gist.githubusercontent.com/capsulecorplab/495058e7a57ed8adaed3c40c80d09739/raw/4a6e6f6ff92b96919be111c9cbb5a4a21ab472d2/.vimrc
      dest: /home/kasm-default-profile/
  - name: Install @capsulecorplab .gitconfig
    get_url:
      url: https://gist.githubusercontent.com/capsulecorplab/401ba2fe0857a328f2a626adbf078cc6/raw/b89a6234f0d620ff60bcfe37f95de197b8772377/.gitconfig
      dest: /home/kasm-default-profile/ 
       

-
  # install Pandoc & TexLive
  hosts: localhost
  connection: local
  gather_facts: yes
  tags: install_generator_pandoc

  vars:
    pandoc_version: "2.17.0.1"
    texlive_version: "2019.20200218-1"
    texlive_version_expected: "pdfTeX 3.14159265-2.6-1.40.20 (TeX Live 2019/Debian)"
    # https://mikefarah.gitbook.io/yq/
    yq_version: v4.20.2
    yq_executable: yq_linux_amd64

  tasks:
  - name: install TeX Live
    apt:
      name: "texlive={{ texlive_version }}"  
      update_cache: yes
    # https://github.com/mikefarah/yq/#install  
  - name: Install yq
    shell:
      cmd: "wget https://github.com/mikefarah/yq/releases/download/{{ yq_version }}/{{ yq_executable }} -O /usr/bin/yq && chmod +x /usr/bin/yq"  
  - name: Get pandoc version
    shell: pandoc --version | grep -m 1 -i pandoc | sed 's/[[:alpha:]|(|[:space:]]//g'
    register: installed_pandoc_version
  - name: Get TeX Live version  
    shell: latex --version | grep -i Tex -m 1 
    register: installed_texlive_version
  - name: Display pandoc and texlive versions
    debug:
      msg: "pandoc = {{ installed_pandoc_version.stdout }} | texlive = {{ installed_texlive_version.stdout }}"
  - name: Test pandoc version
    fail:
      msg: "Pandoc Version Error: Expected {{ pandoc_version }} | Found {{ installed_pandoc_version.stdout }}"
    when: installed_pandoc_version.stdout != pandoc_version    
  - name: Test texlive version
    fail:
      msg: "TeX Live Version Error: Expected {{ texlive_version_expected }} | Found {{ installed_texlive_version.stdout }}"
    when: installed_texlive_version.stdout != texlive_version_expected        

  roles:
  - role: andrewrothstein.pandoc
    pandoc_ver: "{{ pandoc_version }}"

-
  # install PlantUML
  hosts: localhost
  connection: local
  gather_facts: yes
  tags: install_generator_plantuml

  vars:
    jdk_version: 2:1.11-72
    jdk_version_expected: openjdk 11.0.14 2022-01-18
    graphviz_version_expected: "dot - graphviz version 2.50.0 (20211204.2007)"

  tasks:
  - name: Install JDK
    apt:
      name: "default-jdk={{ jdk_version }}"
      update_cache: yes
  - name: Get JDK Version
    shell: java --version | grep -m 1 -i openjdk
    register: installed_jdk_version
  - name: Install pre-reqs to build graphviz
    apt:
      name: build-essential, libcairo2-dev, libexpat-dev, libfreetype-dev, libgd-dev, fontconfig-config, libglib2.0-dev, libgtk2.0-dev, libpng-dev, zlib1g-dev, libsdl-pango-dev, libgts-bin, libgtk-3-dev, libgtkglext1-dev, glade, freeglut3-dev, autoconf, automake, bison, flex, ghostscript, libtool, pkg-config, swig 
      update_cache: yes  
  - name: Download graphviz source code
    get_url:
      url: https://gitlab.com/api/v4/projects/4207231/packages/generic/graphviz-releases/2.50.0/graphviz-2.50.0.tar.gz
      dest: /tmp/graphviz-2.50.0.tar.gz
      checksum: "sha256:e17021a510bbd2770d4ca4b4eb841138122aaa5948f9e617e6bc12b4bac62e8d"
  - name: Expand source files archive
    unarchive:
      src: /tmp/graphviz-2.50.0.tar.gz
      dest: /tmp/
      remote_src: yes
      creates: /tmp/graphviz-2.50.0/README
  - name: Build graphviz
    shell: 
      cmd: ./configure --enable-perl=no && make > /tmp/graphviz_build_output.txt 2>&1 && make install
      creates:
      chdir: /tmp/graphviz-2.50.0/
      executable: /bin/bash    
  - name: Get graphviz version
    shell: dot -V
    register: installed_graphviz_version
  - name: Display JDK and GraphViz versions
    debug:
      msg: "JDK = {{ installed_jdk_version.stdout }} | graphviz = {{ installed_graphviz_version.stderr }}"
  - name: Test JDK version
    fail:
      msg: "JDK Version Error: Expected {{ jdk_version_expected }} | Found {{ installed_jdk_version.stdout }}"
    when: installed_jdk_version.stdout != jdk_version_expected  
  - name: Test Graphviz version
    fail:
      msg: "Graphviz Version Error: Expected {{ graphviz_version_expected }} | Found {{ installed_graphviz_version.stderr }}"
    when: installed_graphviz_version.stderr != graphviz_version_expected        

- 
  # install ASCII Doctor
  hosts: localhost
  connection: local
  gather_facts: yes
  tags: install_generator_asciidoctor

  vars:
    asciidoctor_version: 2.0.17
    asciidoctor_version_expected: "{{ asciidoctor_version }}[.]"

  tasks:
  - name: Install Ruby
    apt:
      name: ruby-full
      update_cache: yes
  - name: Run gem install for asciidoctor
    shell: 
      cmd: "gem install asciidoctor -v {{ asciidoctor_version }}"
  - name: Install PlantUML and PDF support
    shell:
      cmd: gem install asciidoctor-diagram rghost hexapdf text-hyphen rouge pygments.rb coderay asciidoctor-pdf
  - name: Get asciidoctor version
    shell: asciidoctor --version | grep Asciidoctor | sed 's/[[:alpha:]|(|[:space:]]//g' | sed 's/[*~://]//g'
    register: installed_asciidoctor_version
  - name: Display asciidoctor version
    debug:
      msg: "ASCII Doctor = {{ installed_asciidoctor_version.stdout }}"   
  - name: Test asciidoctor version
    fail:
      msg: "ASCII Doctor Version Error: Expected {{ asciidoctor_version_expected }} | Found {{ installed_asciidoctor_version.stdout }}"
    when: installed_asciidoctor_version.stdout != asciidoctor_version_expected        

- 
  # install sudo for the vs-code role below 
  hosts: localhost
  connection: local
  tags: install_vscode

  tasks:
  - name: Install Sudo
    apt:
      name: sudo
      update_cache: yes
  - name: Preserve DONT_PROMPT_WSL_INSTALL in sudoers
    lineinfile:
      path: "/etc/sudoers"
      line: "Defaults        env_keep += \"DONT_PROMPT_WSL_INSTALL\""
    when: wsl2_environment

-
# add dev user to give vs code somewhere to install extensions
  hosts: localhost
  connection: local
  tags: install_vscode

  tasks:
  - name: Add WSL2 required variables to the environment
    lineinfile:
      path: "/etc/bash.bashrc"
      line: "export DONT_PROMPT_WSL_INSTALL=1"
    when: wsl2_environment
  - name: Add dev user
    user:
      name: dev
      uid: 1001

-
  # install the remainder of the tools
  hosts: localhost
  connection: local
  tags: install_vscode

  environment: 
    DONT_PROMPT_WSL_INSTALL: 1
  roles:
    - role: gantsign.visual-studio-code
      users:
        - username: "dev"
          visual_studio_code_extensions:
            - waderyan.nodejs-extension-pack
            - redhat.vscode-yaml
            - jebbs.plantuml
            - asciidoctor.asciidoctor-vscode
            - samuelcolvin.jinjahtml
          visual_studio_code_settings_overwrite: yes
          visual_studio_code_settings: {
            "extensions.ignoreRecommendations": true,
            "update.mode": "none",
            "extensions.autoUpdate": false,
            "extensions.autoCheckUpdates": false,
            "plantuml.exportFormat": "png",
            "plantuml.jar": "/usr/local/bin/plantuml.jar",
            "plantuml.render": "Local",
            "terminal.integrated.profiles.linux": {
              "bash (login)": {
                "path": "bash",
                "args": ["-l"]
                }
              },
            "terminal.integrated.defaultProfile.linux": "bash (login)" 
          }  

-
  # Copy VS Code changes to kasm-default-profile and lean up (remove) dev user now that vs code is installed
  hosts: localhost
  connection: local
  tags: install_vscode

  tasks:
  - name: Copy VS Code changes to kasm-default-profile
    shell: 
      cmd: cp -r /home/dev/.config/Code/ /home/kasm-default-profile/.config/Code/ && cp -r /home/dev/.vscode/ /home/kasm-default-profile/.vscode/
  - name: Remove dev user
    user:
      name: dev
      state: absent
      remove: yes    

-
  # Install knowledge capture tools
  hosts: localhost
  connection: local
  tags: install_knowledge_tools

  tasks:
  - name: Install flatpak
    apt:
      name: flatpak
      update_cache: yes  
  - name: Configure flatpak
    shell:
      cmd: flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo    
  - name: Install Obsidian
    shell: 
      cmd: flatpak install --system --assumeyes --noninteractive flathub md.obsidian.Obsidian    
  - name: Set up Obsidian shortcut
    shell:
      cmd: cp /var/lib/flatpak/exports/share/applications/md.obsidian.Obsidian.desktop /usr/share/applications/md.obsidian.Obsidian.desktop && cp /var/lib/flatpak/exports/share/icons/hicolor/512x512/apps/md.obsidian.Obsidian.png /usr/share/icons/hicolor/512x512/apps/md.obsidian.Obsidian.png  
  - name: Install JabRef
    shell:
      cmd: flatpak install --system --assumeyes --noninteractive flathub org.jabref.jabref
  - name: Set up JabRef shortcut
    shell:
      cmd: cp /var/lib/flatpak/exports/share/applications/org.jabref.jabref.desktop /usr/share/applications/org.jabref.jabref.desktop && cp /var/lib/flatpak/exports/share/icons/hicolor/128x128/apps/org.jabref.jabref.png /usr/share/icons/hicolor/128x128/apps/org.jabref.jabref.png

-
  # Install knowledge capture tools
  hosts: localhost
  connection: local
  tags: install_gtk_pharo

  vars:
  - gtoolkit_zip: GlamorousToolkit-Linux-x86_64-v0.8.1322.zip
  - gtoolkit_zip_path: "/home/kasm-default-profile/{{ gtoolkit_zip }}"

  tasks:
  - name: Download Glamourous Toolkit
    get_url:
      url: "https://dl.feenk.com/gt/{{ gtoolkit_zip }}"
      dest: /home/kasm-default-profile/
  - name: Create installation directory
    file:
      path: /home/kasm-default-profile/gtoolkit/
      state: directory
      mode: '0755'    
  - name: Unzip Glamourous Toolkit
    unarchive:
      src: "{{ gtoolkit_zip_path }}"
      dest: /home/kasm-default-profile/gtoolkit/
      remote_src: yes
  - name: Remove zip file
    file:
      path: "{{ gtoolkit_zip_path }}"
      state: absent
  - name: Download Pharo
    get_url:
      url: https://files.pharo.org/pharo-launcher/linux64
      dest: /home/kasm-default-profile/
  - name: Unzip Pharo
    unarchive:
      src: /home/kasm-default-profile/PharoLauncher-linux-2.3-x64.zip
      dest: /home/kasm-default-profile/
      remote_src: yes
  - name: Remove zip file
    file:
      path: /home/kasm-default-profile/PharoLauncher-linux-2.3-x64.zip
      state: absent      

-
  # install readers
  hosts: localhost
  connection: local
  tags: install_readers

  tasks:
  - name: install Evince
    apt:
      name: evince
      update_cache: yes

  roles:
  - role: webarchitect609.google_chrome
  - role: do1jlr.install_firefox

# Three dots indicate the end of a YAML document
...
